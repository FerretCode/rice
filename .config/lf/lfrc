## Basic vars {{{

set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
# set color256
# set icons
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"

# }}}

## Custom Commands {{{

# This command is ran before opening a file. It determines which program should be used to read the file
cmd open ${{
    case $(file --mime-type $f -b) in
	image/vnd.djvu|application/pdf|application/octet-stream) setsid -f zathura $fx >/dev/null 2>&1 ;;
        text/*) $EDITOR $fx;;
	image/x-xcf|image/svg+xml) setsid -f gimp $f >/dev/null 2>&1 ;;
	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select & ;;
	audio/*) mpv --audio-display=no $f ;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

# custom wrapper to mkdir. allows you to enter the name of the directory
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# custom wrapper to make a file. Opens in nvim
cmd mkfile $nvim "$(echo $* | tr ' ' '\ ')"

# custom wrapper to delete a file/folder. Will prompt you before continuing
cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# }}}

## Bindings {{{

# fuzzy find file (ctrl + f)
map <c-f> $lf -remote "send $id select '$(fzf)'"
# go home (~)
map ~ $lf -remote "send $id select $HOME/"

map gh
map g top # go to top of directory (g)
map D delete # delete selected node (D)

# open current directory in nvim
map V $nvim .
# create new directory (ctrl + n)
map <c-n> push :mkdir<space>
# create new file (ctrl + v)
map <c-v> push :mkfile<space>

# reloads current directory (r)
map r reload
# opens current directory in new terminal window (enter)
map <enter> &$TERMINAL

# execute current file
map x $$f # in current shell (x)
map X &$f # in the background (X)

# Rename keybinds
map c push A<c-u> # new rename (c)

map A rename # at the very end (A)
map I push A<c-a> # at the very beginning (I)

map a push A<a-b> # after extention (a)
map i push A<a-b><a-b><a-f> # before extention (i)

# set wallpaper (b)
cmd setbg "$1"
map b $setbg $f

# set wallpaper (b)
cmd toggle-crypt
map e # unmap e
map e $toggle-crypt # map e to toggle encfs

# }}}
